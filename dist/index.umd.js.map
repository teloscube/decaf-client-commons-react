{"version":3,"file":"index.umd.js","sources":["../src/context.tsx","../src/DecafVersionChecker.tsx","../src/ZendeskWidget.tsx","../src/DecafSpinner.tsx","../src/DecafApp.tsx"],"sourcesContent":["import { buildDecafClient, DecafClient } from '@decafhub/decaf-client';\nimport Cookies from 'js-cookie';\nimport React, { useContext } from 'react';\n\nexport const DecafContext = React.createContext<DecafContextType>({\n  client: undefined as unknown as DecafClient,\n  me: undefined as unknown as Principal,\n  publicConfig: undefined as unknown as PublicConfig,\n});\n\nexport function DecafProvider({ children, value }: { children: JSX.Element; value: DecafContextType }) {\n  return <DecafContext.Provider value={value}>{children}</DecafContext.Provider>;\n}\n\nexport const useDecaf = () => useContext(DecafContext);\n\n/// ///////////////////////\n// INTERNAL DEFINITIONS //\n/// ///////////////////////\n\nexport function getAuthenticationToken(): string | undefined {\n  // Attempt to get the cookie value:\n  const cookie = Cookies.get('ember_simple_auth-session');\n\n  // If no cookie, return nothing:\n  if (!cookie) {\n    return undefined;\n  }\n\n  try {\n    // Attempt to parse the cookie value:\n    const authinfo = JSON.parse(cookie);\n\n    // Get the token, if any:\n    const token: string | undefined = authinfo?.authenticated?.token;\n\n    // Done, return the token:\n    return token;\n  } catch {\n    console.error('Can not parse authentication information!');\n    return undefined;\n  }\n}\n\nexport function getAuthenticatedDecafClient(): DecafClient | undefined {\n  // Attempt to get the authentication token:\n  const token = getAuthenticationToken();\n\n  // Check token, build client and return:\n  return token ? buildDecafClient('', { token }) : undefined;\n}\n\nexport interface DecafContextType {\n  client: DecafClient;\n  me: Principal;\n  publicConfig: PublicConfig;\n}\nexport interface Role {\n  code: string;\n  name: string;\n}\n\nexport interface Team {\n  id: number;\n  name: string;\n}\n\nexport interface Principal {\n  id: number;\n  guid: string;\n  username: string;\n  fullname: string;\n  first_name: string;\n  last_name: string;\n  email?: string;\n  mobile?: string;\n  active: boolean;\n  roles: Role[];\n  teams: Team[];\n  internal: boolean;\n  external: boolean;\n  privileged: boolean;\n}\n\nexport interface PublicConfig {\n  /** company short name */\n  shortname: string;\n  /** company full name */\n  legalname: string;\n  /** company web site */\n  website: string;\n  /** logo url */\n  logo: string;\n  /** terms and conditions */\n  tnc: string;\n  /** zendeks code */\n  zendesk?: string;\n  /** google analytics code */\n  googleax?: string;\n  /** one-time password feature? */\n  otp: null;\n  /** password reset feature should be enabled or not */\n  pwdreset: true;\n}\n","import React, { useEffect, useRef, useState } from 'react';\n\nconst style = `\n.version-modal {\n  background-color: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 9999;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.4em;\n}\n\n.version-modal-title {\n  text-align: center;\n  padding: 10px 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.version-modal-title h2 {\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: white;\n  margin: 0;\n  margin-left: 10px;\n}\n\n.version-modal .version-modal-body {\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n  background-color: #333;\n  border-radius: 5px;\n}\n\n.version-modal .version-modal-content {\n  padding: 5px 20px;\n}\n\n.version-modal .version-modal-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 10px;\n  margin-top: 20px;\n}\n.version-modal .reload-btn {\n  background-color: #177ddc;\n  color: white;\n  border: none;\n  width: 150px;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.version-modal .reload-btn:hover {\n  background-color: #095cb5;\n}\n\n.version-modal .cancel-btn {\n  background-color: #333;\n  color: white;\n  border: none;\n  padding: 10px;\n  cursor: pointer;\n}\n\n.version-modal .cancel-btn:hover {\n  background-color: #444;\n}\n`;\n\nexport interface DecafVersionCheckerProps {\n  currentVersion: string;\n  onNewVersion?: (versionOld: string, versionNew: string) => void;\n}\n\nexport default function DecafVersionChecker(props: DecafVersionCheckerProps) {\n  const [newVersion, setNewVersion] = useState();\n  const interval = useRef<number>();\n\n  useEffect(() => {\n    if (interval.current) {\n      clearInterval(interval.current);\n    }\n    interval.current = window.setInterval(() => {\n      fetch('/version.json?t=' + new Date().getTime())\n        .then((res) => res.json())\n        .then((data) => {\n          setNewVersion(data.version);\n          if (props.currentVersion !== data.version) {\n            props.onNewVersion?.(props.currentVersion, data.version);\n          }\n        })\n        .catch(() => {\n          console.error('DECAF Error: Can not fetch version information!');\n        });\n    }, 1000 * 60);\n    return () => {\n      clearInterval(interval.current);\n    };\n  }, [props]);\n\n  if (props.onNewVersion || !newVersion) {\n    return null;\n  }\n\n  return (\n    <div>\n      {newVersion !== props.currentVersion && (\n        <div className=\"version-modal\">\n          <style>{style}</style>\n          <div className=\"version-modal-body\">\n            <div className=\"version-modal-title\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"50\"\n                height=\"50\"\n                viewBox=\"0 0 24 24\"\n                fill={'#00c12c'}\n                className=\"alert-status-icon\"\n              >\n                {\n                  <path d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6.25 8.891l-1.421-1.409-6.105 6.218-3.078-2.937-1.396 1.436 4.5 4.319 7.5-7.627z\" />\n                }\n              </svg>\n              <h2>New Version Available</h2>\n            </div>\n            <div className=\"version-modal-content\">\n              <p>A new version of your app is available. Please reload the page to update to the latest version.</p>\n              <span>\n                New version: <b style={{ marginRight: 10 }}>{newVersion}</b>\n                (Current version: <b>{props.currentVersion}</b>)\n              </span>\n            </div>\n            <div className=\"version-modal-footer\">\n              <button className=\"cancel-btn\" onClick={() => setNewVersion(undefined)}>\n                Cancel\n              </button>\n              <button className=\"reload-btn\" onClick={window.location.reload}>\n                Reload\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n\nexport interface ZendeskWidgetProps {\n  /** public zendesk key */\n  zendeskKey: string;\n  /** zendesk widget settings. see:\n   *\n   * https://developer.zendesk.com/api-reference/widget/settings/\n   * */\n  settings?: Record<string, any>;\n}\n\nconst ZENDESK_WIDGET_SCRIPT = 'https://static.zdassets.com/ekr/snippet.js';\n\nexport default function ZendeskWidget(props: ZendeskWidgetProps) {\n  useEffect(() => {\n    if (!props.zendeskKey) return;\n    const script = document.createElement('script');\n    script.src = ZENDESK_WIDGET_SCRIPT + '?key=' + props.zendeskKey;\n    script.async = true;\n    script.id = 'ze-snippet'; // do not change this. zendesk expects this to be ze-snippet\n    document.body.appendChild(script);\n    // @ts-expect-error\n    window.zESettings = props.settings || {};\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, [props]);\n\n  return null;\n}\n","import React from 'react';\n\nexport type DecafSpinnerType = {\n  title?: string;\n  color?: string;\n  size?: number;\n  titleColor?: string;\n};\n/**\n *\n * @param title string\n * @param color string\n * @param size number\n * @param titleColor string\n * @returns JSX.Element\n */\nexport default function DecafSpinner(props: DecafSpinnerType) {\n  const style = `\n    .spinner-wrapper {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      flex-direction: column;\n    }\n    .spinner-text {\n      color: ${props.titleColor || '#255d91'};\n    }\n    .spinner {\n      width: ${props.size || '40px'};\n      height: ${props.size || '40px'};\n      position: relative;\n      margin: 10px auto;\n    }\n\n    .double-bounce1,\n    .double-bounce2 {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background-color: ${props.color || '#1890ff'};\n      opacity: 0.6;\n      position: absolute;\n      top: 0;\n      left: 0;\n\n      -webkit-animation: sk-bounce 2s infinite ease-in-out;\n      animation: sk-bounce 2s infinite ease-in-out;\n    }\n\n    .double-bounce2 {\n      -webkit-animation-delay: -1s;\n      animation-delay: -1s;\n    }\n\n    @-webkit-keyframes sk-bounce {\n      0%,\n      100% {\n        -webkit-transform: scale(0);\n      }\n      50% {\n        -webkit-transform: scale(1);\n      }\n    }\n\n    @keyframes sk-bounce {\n      0%,\n      100% {\n        transform: scale(0);\n        -webkit-transform: scale(0);\n      }\n      50% {\n        transform: scale(1);\n        -webkit-transform: scale(1);\n      }\n    }\n  `;\n  return (\n    <div className=\"spinner-wrapper\">\n      <style>{style}</style>\n      <div className=\"spinner\">\n        <div className=\"double-bounce1\"></div>\n        <div className=\"double-bounce2\"></div>\n      </div>\n      {props.title && <p className=\"spinner-text\">{props.title}</p>}\n    </div>\n  );\n}\n","import { DecafClient } from '@decafhub/decaf-client';\nimport DecafVersionChecker from 'DecafVersionChecker';\nimport React, { useEffect } from 'react';\nimport ZendeskWidget from 'ZendeskWidget';\nimport { DecafContext, getAuthenticatedDecafClient, Principal, PublicConfig } from './context';\nimport DecafSpinner from './DecafSpinner';\n\nexport interface DecafAppConfig {\n  /** version of the application */\n  currentVersion?: string;\n  /** callback when a new version is available */\n  onNewVersion?: (versionOld: string, versionNew: string) => void;\n}\nexport interface DecafAppType {\n  children: JSX.Element;\n  config?: DecafAppConfig;\n}\n\nexport default function DecafApp(props: DecafAppType) {\n  const [client, setClient] = React.useState<DecafClient | undefined>(undefined);\n  const [me, setMe] = React.useState<Principal | undefined>(undefined);\n  const [publicConfig, setPublicConfig] = React.useState<PublicConfig | undefined>(undefined);\n  const [loading, setLoading] = React.useState(true);\n\n  function cleanUp() {\n    setClient(undefined);\n    setMe(undefined);\n    setPublicConfig(undefined);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    const client = getAuthenticatedDecafClient();\n    if (client) {\n      Promise.all([client.barista.get('/me/'), client.barista.get('/conf/public/')])\n        .then(([meResp, configResp]) => {\n          setClient(client);\n          setMe(meResp.data);\n          setPublicConfig(configResp.data);\n          setLoading(false);\n        })\n        .catch(cleanUp);\n    } else {\n      cleanUp();\n    }\n  }, []);\n\n  if (loading) {\n    return <DecafSpinner title=\"Please Wait...\" />;\n  }\n\n  if (client === undefined || me === undefined || publicConfig === undefined) {\n    window.location.href = `/webapps/waitress/production/?next=${window.location.href}`;\n    return null;\n  }\n\n  return (\n    <DecafContext.Provider value={{ client, me, publicConfig }}>\n      {props.config?.currentVersion && (\n        <DecafVersionChecker currentVersion={props.config.currentVersion} onNewVersion={props.config.onNewVersion} />\n      )}\n      {publicConfig.zendesk && (\n        <ZendeskWidget\n          zendeskKey={publicConfig.zendesk}\n          settings={{\n            contactForm: {\n              fields: [\n                {\n                  id: 'name',\n                  prefill: { '*': me.fullname },\n                },\n                {\n                  id: 'email',\n                  prefill: { '*': me.email },\n                },\n              ],\n            },\n          }}\n        />\n      )}\n      {props.children}\n    </DecafContext.Provider>\n  );\n}\n"],"names":["DecafContext","React","createContext","client","undefined","me","publicConfig","DecafVersionChecker","props","useState","newVersion","setNewVersion","interval","useRef","useEffect","current","clearInterval","window","setInterval","fetch","Date","getTime","then","res","json","data","version","currentVersion","onNewVersion","console","error","className","xmlns","width","height","viewBox","fill","d","style","marginRight","onClick","location","reload","ZendeskWidget","zendeskKey","script","document","createElement","src","ZENDESK_WIDGET_SCRIPT","async","id","body","appendChild","zESettings","settings","removeChild","DecafSpinner","titleColor","size","color","title","setClient","setMe","setPublicConfig","loading","setLoading","cleanUp","token","cookie","Cookies","get","authinfo","JSON","parse","authenticated","_authinfo$authenticat","getAuthenticationToken","buildDecafClient","Promise","all","barista","meResp","configResp","href","Provider","value","config","zendesk","contactForm","fields","prefill","fullname","email","children","useContext"],"mappings":"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"}